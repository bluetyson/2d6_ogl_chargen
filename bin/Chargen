#!/usr/bin/env ruby
# Base tool to create a quick NPC.
# ruby Chargen <-c career> <-t terms>
#   career defaults based on Soc and terms to 1-5.

$LOAD_PATH << File.expand_path("../../lib/Careers", __FILE__)
$LOAD_PATH << File.expand_path("../../lib/Tools", __FILE__)

require "optparse"
require "Character"
#require "CharacterTools"
require "Presenter"

def list_careers(career_dir)
  
  careers = []  
  Dir.foreach(career_dir) do |file|
    fname = "#{career_dir}/#{file}"
    careers << File.basename(file, '.rb') if File.file?(fname)
  end
  careers
end
 
careers = []
terms  = 0
basic_character = false

available_careers = []
load_dirs = $LOAD_PATH.uniq
load_dirs.each do |dir|
  if dir.end_with?("Careers")
    available_careers = list_careers(dir)
  end
end

option_parser = OptionParser.new do |opts|
  opts.on("-c career", "Career, defaults based on Soc") do |c| 
    careers << c if available_careers.include?(c)
  end
  opts.on("-t terms", "Terms, defaults to range of 1-5") do |t|
    terms = t.to_i
  end
  opts.on("-b", "Just a basic Character") do
    basic_character = true
  end
end
option_parser.parse!

character = Character.new
character.generate

unless basic_character
  #careers << CharacterTools.social_status(character) if careers.empty?
  careers << "Firster"
  srand && terms = rand(5) + 1 if terms == 0

  careers.each do |career|
    # career's class is String
    # For example, "Firster"
    # There is a "Firster.rb" file defining the "Firster" class.
    require career
    
    # This bit works in the other branch.
    #firster = Firster.new

    # This is what I'd like to do, so any career class can be called.
    this_career = Module.const_get(career).new

    # This works in the other branch.
    character.run_career(this_career, terms)
  end

end
Presenter.show(character)
