#!/usr/bin/env ruby
# Base tool to create a quick NPC.
# ruby Chargen <-c career> <-t terms>
#   career defaults based on Soc and terms to 1-5.

$LOAD_PATH << File.expand_path("../../lib/Careers", __FILE__)
$LOAD_PATH << File.expand_path("../../lib/Tools", __FILE__)

require "optparse"
require "Character"
#require "CharacterTools"
require "Presenter"

def list_careers(career_dir)
  
  careers = []  
  Dir.foreach(career_dir) do |file|
    fname = "#{career_dir}/#{file}"
    careers << File.basename(file, '.rb') if File.file?(fname)
  end
  careers
end
 
career = ""
terms  = 0
basic_character = false

available_careers = []
load_dirs = $LOAD_PATH.uniq
load_dirs.each do |dir|
  if dir.end_with?("Careers")
    available_careers = list_careers(dir)
  end
end

options = Hash.new(0)
option_parser = OptionParser.new do |opts|
  opts.on("-c career", "Career, defaults based on Soc") do |c| 
    career = c if available_careers.include?(c)
  end
  opts.on("-t terms", "Terms, defaults to range of 1-5") do |t|
    terms = t.to_i
  end
  opts.on("-b", "Just a basic Character") do
    basic_character = true
  end
end
option_parser.parse!

character = Character.new
character.generate

unless basic_character
  career = CharacterTools.social_status(character) if career.empty?
  srand && terms = rand(5) + 1 if terms == 0

  char = Hash.new(0)
  char["character"] = character
  char["career"]    = career
  char["terms"]     = terms

  CharacterTools.add_career(char)

  case career 
    when "Army" then
      require "Army"
      Army.new(char)
    when "Guide" then
      require "Guide"
      Guide.new(char)
    when "LEO" then
      require "LEO"
      LEO.new(char)
    when "Marine" then
      require "Marine"
      Marine.new(char)
    when "Merchant" then
      require "Merchant"
      Merchant.new(char)
    when "Navy" then
      require "Navy"
      Navy.new(char)
    when "Noble" then
      require "Noble"
      Noble.new(char)
    when "Other" then
      require "Other"
      Other.new(char)
    else
      require "Citizen"
      Citizen.new(char)
  end
end
Presenter.show(character)
